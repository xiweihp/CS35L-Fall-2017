cd Desktop
curl http://web.cs.ucla.edu/classes/fall17/cs35L/assign/assign1.html > exer1.html
cp exer1.html exer2.html
cp exer1.html exer3.html

exercise 1.1: Moving around in Emacs

2. C-s P U B L I C Enter

3. C-s L a b o r a t o r y M-b

4. C-s s e l f -r e f e r e n t i a l M-b M-b

5. C-s a r r o w M-b

6. C-e

7. C-a

8. N/A

9. N/A

10. C-x C-c

Exercise 1.2: Deleting text in Emacs

2.  M-g g 18 Enter C-k

3.  C-s <! C-a C-k

4.  C-s <! C-a C-k C-n C-k C-n C-k

5.  C-s < ! - - C-d C-d C-d C-d Backspace
    C-s < ! C-a C-k

C-x C-c y

Exercise 1.3: Inserting text in Emacs

2. M-% A s s i g n m e n t SP 1 Enter 
A s s i g n m e n t SP 3 7 Enter y y n

3. M-< M-% U T F - 8 Emter U S - A S C I I Enter y

4. C-s < / o l > C-a Enter

5. C-x C-c y

Exercise 1.4: Other editing tasks in Emacs

3. M-> C-r < ! Enter C-@ C-e C-w M-g g 355 Enter C-y

4. M-> C-r < ! Enter C-@ C-w M-g g 340 Enter C-y
M-> C-r < ! Enter C-@ C-n C-n C-e C-w M-g g 303 Enter C-y
M-> C-r < ! Enter C-@ C-w M-g g 93 Enter C-y
M-> C-r < ! Enter C-@ C-e C-w M-g g 18 Enter C-y

5. M-> C-r - - - Enter C-w

6. C--

7. < ! - - M-> - - >

8. M-% < o l > Enter < O l > Enter y y y y y y y 
   find 7 occurrences

9. results are checked

Exercise 1.5: Doing commands in Emacs

1. cd $HOME Enter 
   mkdir junk

2. cd junk
   e m a c s SP h e l l o . c
   C-x C-c y

3. e m a c s h e l l o . c
   M-x c o m p i l e Enter C-a C-k g c c SP
   h e l l o . c SP - o SP h e l l o Enter

4. M-x c o m p i l e Enter . / h e l l o
   C-x o C-x C-w h e l l o - o u t Enter

5. C-x i ~/Desktop/key1.txt Enter
   C-x C-w ~/Desktop/key1.txt Enter y
 
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Thu Oct  5 23:10:24

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Thu Oct  5 23:10:24


Exercise 1.6: Running Elisp code

1. C-x b Enter

2. ( r a n d o m ) C-j

3. ( s e t q SP x SP ( r a n d o m ) ) Enter
   ( s e t q SP y SP ( r a n d o m ) )

4. ( * x y ) C-j The product is 980445066019666995.
   It is not the mathematically correct result of two numbers x,y. 
				   
5. output is 980445066019666995 (#o66331731371170576063, #xd9b3d97c9e2fc33),
   answer is the same but with more nums in parenthesis.

6. C-h f random Enter
   As described in *help* buffer, the function returns a pseudo-random number.
   It will set the random number seed from the current time and pid.
   Thus, they are not truly random integers.

7. The total number of the value of a random number is 2^62.(-2^61~2^61-1)
   When one number is 1, there are 0 possibility that the answer is incorrect;
   When one number is 2, there are 1/2 possibilty that the answer is incorrect;
   When one number is  2^61-1, there are
   (1- 1/(2^61-1)) possibility the answer is incorrect.
   Thus, for positive numbers, the possibility it is incorrect is:
   Sigma(n=1~2^61-1) (1/2^62) * (1-1/n).
   Then consider negative numbers, zero, and minimum, the possibility becomes:
   (1/2^62)[2(Sigma(1~2^61-1)(1-(1/n))+(1-(1/2^61))]
   let Sigma(1~2^61-1)(1/n) equals ln(n) because n is really big.
   Smplify it and  use computer to calculate, the result is 
   0.99999999999999998, approximatly 1.
   The product of two random numbers is almost always mathematically incorrect.
